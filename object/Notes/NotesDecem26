
Dec_26_2021

int a = 23;
object: instance of class

  AirPlane pl = new AirPlane();
instance variable
local variables
object can have behavior: -- methods
method
public void morning(){}
public
private
default
protected
--------
primitives
void
object
--------
public void morning(String str, int age, boolean bl, short[] numbers){}
parameters
==========================================
void
int sum(){
  return 5;
}
int number = x.sum();
-----------------
void sum1(){
  2+3
}
x.sum1;
======Method Overloading========
!* when you create multiple methods with same name
        but different parameters, it is called 'Method Overloading'.
!* return type and access modifiers don't effect method Overloading.
-method signature: method name + parameters
  public  void run(String dest){
    }
     public  int run(String name){
    }
   public  boolen run(int mile){

    }
   public  void run(int mile, String dest, boolean bl){

    }
   public  void run(boolean bl, int number){

    }
============
Static polymorphism: method overloading is a type of static polymorphism
* java decides which method to call during compile time
!> !Static :
!1 can be used for methods and instance variables
!2 makes varibales and methods belong to that Class
!3 each object will be sharing static variables and methods
!4 local variables can not be static
!5 Static methods can be called without object
!6 inside of 'Static' methods, only 'Static' methods can be called without object
!7 inside of 'Non-Static' methods, 'Static' and 'Non-static' methods can be called without object
!8 'static' key word has to be before 'return' type of method as a syntax rule
